{
  "Date": "2022-09-28T14:37:06.105765+03:00",
  "Uname": "Linux titanfall 5.13.0-51-generic #58~20.04.1-Ubuntu SMP Tue Jun 14 11:29:12 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux",
  "OS": "Ubuntu",
  "OSRelease": "20.04",
  "Architecture": "amd64",
  "ExecutablePath": "/load_fuzzer",
  "ProcEnviron": [],
  "ProcCmdline": "/load_fuzzer /fuzz/sydr-fuzz-out/crashes/crash-254f411aa187e4121abf69e12e01ed8c245b8567",
  "ProcStatus": [],
  "ProcMaps": [],
  "ProcFiles": [],
  "NetworkConnections": [],
  "CrashSeverity": {
    "Type": "NOT_EXPLOITABLE",
    "ShortDescription": "SourceAv",
    "Description": "Access violation on source operand",
    "Explanation": "The target crashed on an access violation at an address matching the source operand of the current instruction. This likely indicates a read access violation."
  },
  "Stacktrace": [
    "#0 0x7ffff7f23c08 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (/lib/x86_64-linux-gnu/libstdc++.so.6+0x145c08)",
    "#1 0xa8e1df in xlnt::detail::xlsx_consumer::read_office_document(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /xlnt/source/detail/serialization/xlsx_consumer.cpp:2044:22",
    "#2 0xa64f76 in xlnt::detail::xlsx_consumer::read_part(std::vector<xlnt::relationship, std::allocator<xlnt::relationship> > const&) /xlnt/source/detail/serialization/xlsx_consumer.cpp:1508:9",
    "#3 0xa0f00f in xlnt::detail::xlsx_consumer::populate_workbook(bool) /xlnt/source/detail/serialization/xlsx_consumer.cpp:1658:5",
    "#4 0xa0c942 in xlnt::detail::xlsx_consumer::read(std::istream&) /xlnt/source/detail/serialization/xlsx_consumer.cpp:401:5",
    "#5 0x549cfc in xlnt::workbook::load(std::istream&) /xlnt/source/workbook/workbook.cpp:894:18",
    "#6 0x571587 in xlnt::workbook::load(std::vector<unsigned char, std::allocator<unsigned char> > const&) /xlnt/source/workbook/workbook.cpp:919:5",
    "#7 0x515612 in LLVMFuzzerTestOneInput /xlnt/build/../load_fuzzer.cc:9:23",
    "#8 0x442481 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15",
    "#9 0x42c39c in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6",
    "#10 0x4320eb in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9",
    "#11 0x45b682 in main /llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10",
    "#12 0x7ffff7a71082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16",
    "#13 0x426cbd in _start (/load_fuzzer+0x426cbd)"
  ],
  "Prstatus": {
    "registers": {}
  },
  "Disassembly": [],
  "Package": "",
  "PackageVersion": "",
  "PackageArchitecture": "",
  "PackageDescription": "",
  "timestamp": 1664365026105765997,
  "AsanReport": [
    "==237040==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000010 (pc 0x7ffff7f23c08 bp 0x7fffffffbc70 sp 0x7fffffff5a98 T0)",
    "==237040==The signal is caused by a READ memory access.",
    "==237040==Hint: address points to the zero page.",
    "    #0 0x7ffff7f23c08 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (/lib/x86_64-linux-gnu/libstdc++.so.6+0x145c08)",
    "    #1 0xa8e1df in xlnt::detail::xlsx_consumer::read_office_document(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /xlnt/source/detail/serialization/xlsx_consumer.cpp:2044:22",
    "    #2 0xa64f76 in xlnt::detail::xlsx_consumer::read_part(std::vector<xlnt::relationship, std::allocator<xlnt::relationship> > const&) /xlnt/source/detail/serialization/xlsx_consumer.cpp:1508:9",
    "    #3 0xa0f00f in xlnt::detail::xlsx_consumer::populate_workbook(bool) /xlnt/source/detail/serialization/xlsx_consumer.cpp:1658:5",
    "    #4 0xa0c942 in xlnt::detail::xlsx_consumer::read(std::istream&) /xlnt/source/detail/serialization/xlsx_consumer.cpp:401:5",
    "    #5 0x549cfc in xlnt::workbook::load(std::istream&) /xlnt/source/workbook/workbook.cpp:894:18",
    "    #6 0x571587 in xlnt::workbook::load(std::vector<unsigned char, std::allocator<unsigned char> > const&) /xlnt/source/workbook/workbook.cpp:919:5",
    "    #7 0x515612 in LLVMFuzzerTestOneInput /xlnt/build/../load_fuzzer.cc:9:23",
    "    #8 0x442481 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:611:15",
    "    #9 0x42c39c in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:324:6",
    "    #10 0x4320eb in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:860:9",
    "    #11 0x45b682 in main /llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10",
    "    #12 0x7ffff7a71082 in __libc_start_main /build/glibc-SzIz7B/glibc-2.31/csu/../csu/libc-start.c:308:16",
    "    #13 0x426cbd in _start (/load_fuzzer+0x426cbd)",
    "",
    "AddressSanitizer can not provide additional info.",
    "SUMMARY: AddressSanitizer: SEGV (/lib/x86_64-linux-gnu/libstdc++.so.6+0x145c08) in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)",
    "==237040==ABORTING"
  ],
  "CrashLine": "/xlnt/source/detail/serialization/xlsx_consumer.cpp:2044:22",
  "Source": [
    "    2040       }",
    "    2041   ",
    "    2042       for (auto worksheet_rel : manifest().relationships(workbook_path, relationship_type::worksheet))",
    "    2043       {",
    "--->2044           auto title = std::find_if(target_.d_->sheet_title_rel_id_map_.begin(),",
    "    2045               target_.d_->sheet_title_rel_id_map_.end(),",
    "    2046               [&](const std::pair<std::string, std::string> &p) {",
    "    2047                   return p.second == worksheet_rel.id();",
    "    2048               })",
    "    2049                            ->first;"
  ]
}